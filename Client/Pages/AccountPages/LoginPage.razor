@page "/identity/account/login"
@layout AuthenticationLayout

<div class="container-fluid vh-100 d-flex justify-content-center align-items-center" style="backdrop-filter: blur(10px);">
    <EditForm Model="User" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />

        <div class="card bg-dark p-4 rounded-4 shadow-lg" style="min-width: 450px; transform: scale(0.95); opacity: 0.4; animation: fadeInScale 0.5s ease-out forwards;">
            <div class="text-center mb-4">
                <div class="logo-container" style="width: 60px; height: 60px; margin: 0 auto; background: linear-gradient(135deg, #3a7bd5, #00d2ff); border-radius: 12px; display: flex; justify-content: center; align-items: center; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
                    <span style="color: white; font-weight: bold; font-size: 1.2rem;">EMS</span>
                </div>
            </div>

            <div class="card-header text-center fs-4 fw-bold mb-3 border-0" style="color: #00d2ff;">Login</div>

            <div class="card-body">
                <div class="mb-3 form-floating">
                    <InputText @bind-Value="User.Email" id="email" class="form-control" placeholder=" " />
                    <label for="email" class="form-label">Email</label>
                </div>

                <div class="mb-3 form-floating">
                    <InputText @bind-Value="User.Password" id="password" type="password" class="form-control" placeholder=" " />
                    <label for="password" class="form-label">Password</label>
                </div>

                <div class="d-grid mt-4">
                    @if (ShowLoadingButton)
                    {
                        <button type="button" class="btn btn-primary py-2 rounded-pill fw-bold" style="background: linear-gradient(135deg, #3a7bd5, #00d2ff); border: none;" disabled>
                            <div class="spinner-container" style="display: flex; justify-content: center; align-items: center;">
                                <div class="spinner-border text-light" role="status" style="width: 1.5rem; height: 1.5rem;">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        </button>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-primary py-2 rounded-pill fw-bold" style="background: linear-gradient(135deg, #3a7bd5, #00d2ff); border: none; transition: all 0.3s ease;">
                            <span style="display: inline-block; transition: transform 0.3s ease;">Login</span>
                        </button>
                    }
                </div>
            </div>
            <div class="card-footer">
                <div class="text-center mt-3">
                    <span style="color: white;">Don't have an account?</span>

                    <a href="identity/account/register" class="text-decoration-none btn-link" style="color: #3a7bd5;">Create an account</a>
                </div>
                <ValidationSummary />
            </div>
        </div>
    </EditForm>
</div>

<style>
    .form-control {
    border-radius: 8px;
    border: 1px solid #ced4da;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

    .form-control:focus {
    border-color: #3a7bd5;
    box-shadow: 0 0 0 0.25rem rgba(58, 123, 213, 0.25);
    }

    .form-floating > label {
    color: #6c757d;
    transition: all 0.2s ease;
    }

    .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .btn-primary:hover span {
    transform: scale(1.05);
    }

    @@keyframes fadeInScale {
    0% {
    transform: scale(0.95);
    opacity: 0;
    }

    100% {
    transform: scale(1);
    opacity: 1;
    }
    }

    body {
    background-color: #f8f9fa;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
</style>

@code {

    Login User = new();
    public bool ShowLoadingButton { get; set; } = false;
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await CheckUserAuthenticationState();
    }

    async Task HandleLogin()
    {
        ShowLoadingButton = true;
        var result = await accountService.SignInAsync(User);
        if (result.Flag)
        {
            await DisplayDialog(result.Message, "Login Success");
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession() { Token = result.Token, RefreshToken = result.RefreshToken });
            NavManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            await DisplayDialog(result.Message, "Alert");
        }
        ShowLoadingButton = false;
    }

    private async Task DisplayDialog(string content, string title)
    {
        await dialogService.AlertAsync(content, title);
    }

    private async Task CheckUserAuthenticationState()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user?.Identity != null && user.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo("/home/dashboard");
        }
    }
}
