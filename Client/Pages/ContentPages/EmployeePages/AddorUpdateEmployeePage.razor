@implements IDisposable

@if (allState.ShowEmployee)
{
    if (ShowAddOrUpdateEmployee)
    {
        <div class="employee-form-container">
            <div class="form-header">
                <i class="bi bi-x-lg close-btn" @onclick="Closeform"></i>
                <h5 class="form-title">@Title Employee</h5>
            </div>

            <div class="progress-indicator">
                <div class="@(FirstLayer ? "step active" : "step")">1</div>
                <div class="divider"></div>
                <div class="@(SecondLayer ? "step active" : "step")">2</div>
            </div>

            <div class="form-body">
                @if (FirstLayer)
                {
                    <EditForm Enhance Model="EmployeeGroup1" OnValidSubmit="Form1">
                        <DataAnnotationsValidator />
                        <div class="form-row">
                            <div class="form-col">
                                <h6 class="section-title">Personal Information</h6>
                                <div class="form-group">
                                    <label>Fullname</label>
                                    <InputText @bind-Value="EmployeeGroup1.Name" class="form-control" />
                                    <ValidationMessage For="() => EmployeeGroup1.Name" class="text-danger small" />
                                </div>
                                <div class="form-group">
                                    <label>Telephone</label>
                                    <InputText @bind-Value="EmployeeGroup1.TelephoneNumber" class="form-control" />
                                    <ValidationMessage For="() => EmployeeGroup1.TelephoneNumber" class="text-danger small" />
                                </div>
                                <div class="form-group">
                                    <label>Address</label>
                                    <InputTextArea @bind-Value="EmployeeGroup1.Address" class="form-control" />
                                    <ValidationMessage For="() => EmployeeGroup1.Address" class="text-danger small" />
                                </div>
                            </div>
                            <div class="form-col">
                                <h6 class="section-title">Other Information</h6>
                                <div class="form-group">
                                    <label>Civil Id</label>
                                    <InputText @bind-Value="EmployeeGroup1.CivilId" class="form-control" />
                                    <ValidationMessage For="() => EmployeeGroup1.CivilId" class="text-danger small" />
                                </div>
                                <div class="form-group">
                                    <label>File Number</label>
                                    <InputText @bind-Value="EmployeeGroup1.FileNumber" class="form-control" />
                                    <ValidationMessage For="() => EmployeeGroup1.FileNumber" class="text-danger small" />
                                </div>
                                <div class="form-group">
                                    <label class="@(ImageUploadMessage == "" ? "" : "text-danger")">
                                        @(ImageUploadMessage == "" ? "Upload Image" : ImageUploadMessage)
                                    </label>
                                    <InputFile class="form-control" OnChange="UploadImage"></InputFile>
                                    <ValidationMessage For="() => EmployeeGroup1.Photo" class="text-danger small" />
                                </div>
                                @if (!string.IsNullOrEmpty(EmployeeGroup1.Photo))
                                {
                                    <div class="image-preview mt-2">
                                        <img src="@EmployeeGroup1.Photo" class="img-thumbnail" width="100" height="100" />
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="form-footer">
                            <button type="submit" class="btn btn-primary btn-sm float-end">
                                <i class="bi bi-arrow-right"></i> Next
                            </button>
                        </div>
                    </EditForm>
                }
                @if (SecondLayer)
                {
                    <EditForm Enhance Model="EmployeeGroup2" OnValidSubmit="Form2">
                        <DataAnnotationsValidator />
                        <div class="form-row">
                            <div class="form-col">
                                <h6 class="section-title">Job Information</h6>
                                <div class="form-group">
                                    <label>Job Name</label>
                                    <InputText @bind-Value="EmployeeGroup2.JobName" class="form-control" />
                                    <ValidationMessage For="() => EmployeeGroup2.JobName" class="text-danger small" />
                                </div>
                                <div class="form-group">
                                    <label>General Department</label>
                                    <SfDropDownList TValue="string" TItem="GeneralDepartment" Placeholder="@(GeneralDepartment.Equals("") ? "Select General Department" : GeneralDepartment)" DataSource="GeneralDepartments">
                                        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                        <DropDownListEvents TValue="string" TItem="GeneralDepartment" ValueChange="OnGeneralDepartmentValueChange"></DropDownListEvents>
                                    </SfDropDownList>
                                </div>
                                <div class="form-group">
                                    <label>Department</label>
                                    <SfDropDownList TValue="string" TItem="Department" Placeholder="@(Department.Equals("") ? "Select Department" : Department)" DataSource="Departments">
                                        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                        <DropDownListEvents TValue="string" TItem="Department" ValueChange="OnDepartmentValueChange"></DropDownListEvents>
                                    </SfDropDownList>
                                </div>
                                <div class="form-group">
                                    <label>Branch</label>
                                    <SfDropDownList TValue="string" TItem="Branch" Placeholder="@(Branch.Equals("") ? "Select Branch" : Branch)" DataSource="Branches">
                                        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                        <DropDownListEvents TValue="string" TItem="Branch" ValueChange="OnBranchValueChange"></DropDownListEvents>
                                    </SfDropDownList>
                                    <ValidationMessage For="() => EmployeeGroup2.BranchId" class="text-danger small" />
                                </div>
                            </div>
                            <div class="form-col">
                                <h6 class="section-title">Location Information</h6>
                                <div class="form-group">
                                    <label>Country</label>
                                    <SfDropDownList TValue="string" TItem="Country" Placeholder="@(Country.Equals("") ? "Select Country" : Country)" DataSource="Countries">
                                        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                        <DropDownListEvents TValue="string" TItem="Country" ValueChange="OnCountryValueChange"></DropDownListEvents>
                                    </SfDropDownList>
                                </div>
                                <div class="form-group">
                                    <label>City</label>
                                    <SfDropDownList TValue="string" TItem="City" Placeholder="@(City.Equals("") ? "Select City" : City)" DataSource="Cities">
                                        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                        <DropDownListEvents TValue="string" TItem="City" ValueChange="OnCityValueChange"></DropDownListEvents>
                                    </SfDropDownList>
                                </div>
                                <div class="form-group">
                                    <label>Town</label>
                                    <SfDropDownList TValue="string" TItem="Town" Placeholder="@(Town.Equals("") ? "Select Town" : Town)" DataSource="Towns">
                                        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                        <DropDownListEvents TValue="string" TItem="Town" ValueChange="OnTownValueChange"></DropDownListEvents>
                                    </SfDropDownList>
                                    <ValidationMessage For="() => EmployeeGroup2.TownId" class="text-danger small" />
                                </div>
                                <div class="form-group">
                                    <label>Other</label>
                                    <textarea @bind="EmployeeGroup2.Other" placeholder="Optional" class="form-control"></textarea>
                                </div>
                            </div>
                        </div>
                        <div class="form-footer">
                            <button type="button" class="btn btn-secondary btn-sm" @onclick="PrevClicked">
                                <i class="bi bi-arrow-left"></i> Previous
                            </button>
                            <button type="submit" class="btn btn-success btn-sm float-end">
                                <i class="bi bi-save"></i> Save
                            </button>
                        </div>
                    </EditForm>
                }
            </div>
        </div>

        <style>
            .employee-form-container {
                max-width: 900px;
                margin: 1rem auto;
                background: white;
                border-radius: 8px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }

            .form-header {
                background: linear-gradient(135deg, #1a2a6c, #3a7bd5);
                color: white;
                padding: 0.75rem 1rem;
                display: flex;
                align-items: center;
                gap: 1rem;
            }

            .close-btn {
                cursor: pointer;
                font-size: 1.25rem;
            }

            .form-title {
                margin: 0;
                font-weight: 500;
            }

            .progress-indicator {
                display: flex;
                align-items: center;
                padding: 0.75rem 1rem;
                background: #f8f9fa;
                border-bottom: 1px solid #e9ecef;
            }

            .step {
                width: 25px;
                height: 25px;
                border-radius: 50%;
                background: #e9ecef;
                color: #6c757d;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 0.8rem;
                font-weight: 500;
            }

                .step.active {
                    background: #3a7bd5;
                    color: white;
                }

            .divider {
                flex: 1;
                height: 1px;
                background: #dee2e6;
                margin: 0 0.5rem;
                max-width: 50px;
            }

            .form-body {
                padding: 1rem;
            }

            .form-row {
                display: flex;
                gap: 1rem;
            }

            .form-col {
                flex: 1;
            }

            .section-title {
                font-size: 0.9rem;
                font-weight: 600;
                color: #495057;
                margin-bottom: 1rem;
                padding-bottom: 0.25rem;
                border-bottom: 1px solid #f0f2f5;
            }

            .form-group {
                margin-bottom: 1rem;
            }

            .form-control {
                font-size: 0.9rem;
                padding: 0.5rem 0.75rem;
            }

            .form-footer {
                padding: 1rem 0;
                border-top: 1px solid #f0f2f5;
                margin-top: 1rem;
            }

            .image-preview {
                text-align: center;
            }

            .img-thumbnail {
                border-radius: 4px;
                object-fit: cover;
            }

            @@media (max-width: 768px) {
                .form-row {
                    flex-direction: column;
                    gap: 0;
                }
            }
        </style>
    }
}

@code {
    [Parameter] public Employee Employee { get; set; } = new();
    [Parameter] public bool ShowAddOrUpdateEmployee { get; set; }
    [Parameter] public EmployeeGroup1 EmployeeGroup1 { get; set; } = new();
    [Parameter] public EmployeeGroup2 EmployeeGroup2 { get; set; } = new();

    [Parameter] public List<GeneralDepartment> GeneralDepartments { get; set; } = new();
    [Parameter] public List<Department> Departments { get; set; } = new();
    [Parameter] public List<Branch> Branches { get; set; } = new();

    [Parameter] public List<Country> Countries { get; set; } = new();
    [Parameter] public List<City> Cities { get; set; } = new();
    [Parameter] public List<Town> Towns { get; set; } = new();

    string FloatingNumber1 = "floatingNumber";
    string Floatingdiv1 = "floatingDiv";

    string FloatingNumber2 = "inactive-span";
    string Floatingdiv2 = "inactive-div";

    public bool FirstLayer { get; set; } = true;
    public bool SecondLayer { get; set; } = false;

    public string Title { get; set; } = "Add";
    public string GeneralDepartment { get; set; } = "";
    public string Department { get; set; } = "";
    public string Branch { get; set; } = "";
    public string Country { get; set; } = "";
    public string City { get; set; } = "";
    public string Town { get; set; } = "";

    private void ShowLayer2()
    {
        FirstLayer = false;
        SecondLayer = true;
    }

    void PrevClicked()
    {
        FirstLayer = true;
        SecondLayer = false;
    }

    protected override void OnInitialized()
    {
        allState.Action += StateHasChanged; 
    }

    public void ClearContent()
    {
        EmployeeGroup1 = new();
        EmployeeGroup2 = new();
        Employee = new();
        StateHasChanged();
    }

    // image upload 
    private string ImageUploadMessage = "";
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        long maxFileSize = 20 * 1024 * 1024; // 20mb
        string[] allowedImageTypes = { "image/png", "image/jpeg", "image/gif", "image/webp" };

        if (e.File.Size > maxFileSize)
        {
            ImageUploadMessage = "File size exceeds the 20MB limit.";
            return;
        }

        if (!allowedImageTypes.Contains(e.File.ContentType))
        {
            ImageUploadMessage = "Invalid file type. Please upload a PNG, JPG, GIF, or WebP image.";
            return;
        }

        try
        {
            var format = e.File.ContentType;
            var resizeImage = await e.File.RequestImageFileAsync(format, 300, 400);
            var buffer = new byte[resizeImage.Size];

            await resizeImage.OpenReadStream().ReadAsync(buffer);

            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

            ImageUploadMessage = ""; // Clear any previous error message
            EmployeeGroup1.Photo = imageData;
        }
        catch (Exception ex)
        {
            ImageUploadMessage = $"An error occurred while processing the image: {ex.Message}";
        }
    }

    //Form closed
    [Parameter] public EventCallback NotifyParentFormCloseClicked { get; set; }
    async Task Closeform()
    {
        ShowAddOrUpdateEmployee = false;
        await NotifyParentFormCloseClicked.InvokeAsync();
    }
    public void Dispose() => allState.Action -= StateHasChanged;

    // Forms Handleing / 1 & 2

    // FORM VALIDATION - FORM1
    private bool ValidateEmployeeGroup1()
    {
        if (string.IsNullOrEmpty(EmployeeGroup1.Name)
            || string.IsNullOrEmpty(EmployeeGroup1.TelephoneNumber)
            || string.IsNullOrEmpty(EmployeeGroup1.FileNumber)
            || string.IsNullOrEmpty(EmployeeGroup1.Address)
            || string.IsNullOrEmpty(EmployeeGroup1.Photo)
            || string.IsNullOrEmpty(EmployeeGroup1.CivilId))
            return false;
        else
            return true;
    }

    // FORM VALIDATION - FORM2
    private bool ValidateEmployeeGroup2()
    {
        if (string.IsNullOrEmpty(EmployeeGroup2.JobName)
            || (EmployeeGroup2.TownId == 0)
            || (EmployeeGroup2.BranchId == 0))
            return false;
        else
            return true;
    }

    // save forms
    [Parameter] public EventCallback<Employee> HandleSaveEmployeeClickedEvent { get; set; }

    private void Form1()
    {
        var isValid = ValidateEmployeeGroup1();
        if (isValid)
        {
            Employee.Name = EmployeeGroup1.Name;
            Employee.FullName = EmployeeGroup1.Name;
            Employee.TelephoneNumber = EmployeeGroup1.TelephoneNumber;
            Employee.Address = EmployeeGroup1.Address;
            Employee.CivilId = EmployeeGroup1.CivilId;
            Employee.FileNumber = EmployeeGroup1.FileNumber;
            Employee.Photo = EmployeeGroup1.Photo;
            ShowLayer2();
        }
    }

    private async Task Form2()
    {
        var isValid = ValidateEmployeeGroup2();
        if (isValid)
        {
            Employee.JobName = EmployeeGroup2.JobName;
            Employee.Other = EmployeeGroup2.Other;
            Employee.BranchId = EmployeeGroup2.BranchId;
            Employee.TownId = EmployeeGroup2.TownId;

            await HandleSaveEmployeeClickedEvent.InvokeAsync(Employee);
            ClearContent();
        }
    }

    // CALL BACKS FOR General Department / Department / Branch
    [Parameter] public EventCallback<int> HandleGeneralDepartmentSelectedEvent { get; set; }
    async Task OnGeneralDepartmentValueChange(ChangeEventArgs<string, GeneralDepartment> args)
    {
        await HandleGeneralDepartmentSelectedEvent.InvokeAsync(int.Parse(args.Value));
    }

    [Parameter] public EventCallback<int> HandleDepartmentSelectedEvent { get; set; }
    async Task OnDepartmentValueChange(ChangeEventArgs<string, Department> args)
    {
        await HandleDepartmentSelectedEvent.InvokeAsync(int.Parse(args.Value));
    }

    public void OnBranchValueChange(ChangeEventArgs<string, Branch> args)
    {
        EmployeeGroup2.BranchId = int.Parse(args.Value);
    }

    // CALL BACKS FOR Country  / City / Town
    [Parameter] public EventCallback<int> HandleCountrySelectedEvent { get; set; }
    public void OnCountryValueChange(ChangeEventArgs<string, Country> args)
    {
        HandleCountrySelectedEvent.InvokeAsync(int.Parse(args.Value));
    }

    [Parameter] public EventCallback<int> HandleCitySelectedEvent { get; set; }
    public async Task OnCityValueChange(ChangeEventArgs<string, City> args)
    {
        await HandleCitySelectedEvent.InvokeAsync(int.Parse(args.Value));
    }

    public void OnTownValueChange(ChangeEventArgs<string, Town> args)
    {
        EmployeeGroup2.TownId = int.Parse(args.Value);
    }

}