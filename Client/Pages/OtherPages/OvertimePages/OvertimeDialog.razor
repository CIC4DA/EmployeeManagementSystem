<SfDialog Width="400px" IsModal="true" ShowCloseIcon="true" @bind-Visible="IsVisible" CssClass="overtime-dialog">
    <DialogEvents OnOpen="OpenDialog"></DialogEvents>
    <DialogTemplates>
        <Header>
            <div class="dialog-header">
                <i class="bi bi-clock-history"></i>
                <span>@Title Employee's Overtime</span>
            </div>
        </Header>
        <Content>
            <EditForm Model="ItemModel" OnValidSubmit="Save">
                <DataAnnotationsValidator />
                <div class="form-container">
                    <div class="form-group">
                        <label class="form-label">Employee ID</label>
                        <input @bind="ItemModel.EmployeeId" class="form-control" disabled />
                    </div>

                    <div class="date-row">
                        <div class="form-group">
                            <label class="form-label">Start Date</label>
                            <InputDate @bind-value="ItemModel.StartDate" class="form-control"/>
                            <ValidationMessage For="@(() => ItemModel.StartDate)" class="text-danger small" />
                        </div>
                        <div class="form-group">
                            <label class="form-label">End Date</label>
                            <InputDate @bind-value="ItemModel.EndDate" class="form-control"
                                       min="@(ItemModel.StartDate.ToString("yyyy-MM-dd"))" />
                            <ValidationMessage For="@(() => ItemModel.EndDate)" class="text-danger small" />
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Number of Days</label>
                        <input value="@ItemModel.NumberOfDays" class="form-control" disabled />
                    </div>

                    <div class="form-group">
                        <label class="form-label">Overtime Type</label>
                        @if (ItemModel.OvertimeType != null)
                        {
                            <SfDropDownList TValue="string" TItem="OvertimeType"
                                            Placeholder="@ItemModel.OvertimeType.Name"
                                            DataSource="@OvertimeTypes" CssClass="type-dropdown">
                                <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="string" TItem="OvertimeType" ValueChange="OnValueChange"></DropDownListEvents>
                            </SfDropDownList>
                        }
                        else
                        {
                            <SfDropDownList TValue="string" TItem="OvertimeType"
                                            Placeholder="Select Type"
                                            DataSource="@OvertimeTypes" CssClass="type-dropdown">
                                <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="string" TItem="OvertimeType" ValueChange="OnValueChange"></DropDownListEvents>
                            </SfDropDownList>
                        }
                        <ValidationMessage For="@(() => ItemModel.OvertimeTypeId)" class="text-danger small" />
                    </div>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>

    <DialogButtons>
        <DialogButton Content="Cancel" CssClass="btn-cancel" OnClick="CloseDialog" />
        <DialogButton Content="Save Overtime" CssClass="btn-save" IsPrimary="true" OnClick="Save" />
    </DialogButtons>
</SfDialog>

@code {
    [Parameter] public Overtime ItemModel { get; set; } = new();
    [Parameter] public List<OvertimeType> OvertimeTypes { get; set; } = new();
    [Parameter] public EventCallback<Overtime> HandleSaveOperationEvent { get; set; }
    public string Title { get; set; } = "Add";
    private bool IsVisible { get; set; } = false;

    protected override void OnInitialized()
    {
        ItemModel.StartDate = DateTime.Now;
        ItemModel.EndDate = DateTime.Now;
    }

    private async Task Save()
    {
        if (ItemModel.EndDate < ItemModel.StartDate)
        {
            await dialogService.AlertAsync("End date cannot be before start date.", "Validation Error");
            return;
        }

        if (ItemModel.OvertimeTypeId <= 0)
        {
            await dialogService.AlertAsync("You need to select an overtime type.", "Validation Error");
            return;
        }

        // Update number of days before saving
        await HandleSaveOperationEvent.InvokeAsync(ItemModel);
    }

    public void OpenDialog()
    {
        IsVisible = true;
        StateHasChanged();
    }

    public void CloseDialog()
    {
        IsVisible = false;
        StateHasChanged();
    }

    public void OnValueChange(ChangeEventArgs<string, OvertimeType> args)
    {
        ItemModel.OvertimeTypeId = int.Parse(args.Value.ToString());
        StateHasChanged();
    }

    public void ChangeTitle(string title) => Title = title;
}